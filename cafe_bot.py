import json
import os
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaVideo
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    filters
)
import logging
import glob
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
MAIN_MENU, PROCESS_CHECKLIST, GET_REASON, GET_MEDIA, GET_COMMENTS = range(5)

class ChecklistBot:
    def __init__(self):
        self.BASE_DIR = os.path.dirname(os.path.abspath(__file__))
        self.CONFIG_DIR = os.path.join(self.BASE_DIR, "config")
        self.REPORTS_DIR = os.path.join(self.BASE_DIR, "reports")
        self.MEDIA_DIR = os.path.join(self.BASE_DIR, "media")
        
        os.makedirs(self.CONFIG_DIR, exist_ok=True)
        os.makedirs(self.REPORTS_DIR, exist_ok=True)
        os.makedirs(self.MEDIA_DIR, exist_ok=True)
        
        self.MAX_MEDIA_AGE_DAYS = 7
        self.last_media_cleanup = datetime.min
        self.TIMEOUT = 30  # –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API

    def load_json(self, file_path, default=None):
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError) as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {file_path}: {e}")
            return default if default is not None else {}

    def save_json(self, data, file_path):
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ {file_path}: {e}")
            return False

    def clean_old_media(self, force=False):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ —á–∞—Å"""
        try:
            now = datetime.now()
            if not force and (now - self.last_media_cleanup) < timedelta(hours=1):
                return
                
            cutoff = now - timedelta(days=self.MAX_MEDIA_AGE_DAYS)
            deleted_files = 0
            
            for filepath in glob.glob(os.path.join(self.MEDIA_DIR, '*')):
                try:
                    file_time = datetime.fromtimestamp(os.path.getmtime(filepath))
                    if file_time < cutoff:
                        os.remove(filepath)
                        deleted_files += 1
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {filepath}: {e}")
            
            self.last_media_cleanup = now
            logger.info(f"–û—á–∏—Å—Ç–∫–∞ –º–µ–¥–∏–∞: —É–¥–∞–ª–µ–Ω–æ {deleted_files} —Ñ–∞–π–ª–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –º–µ–¥–∏–∞: {e}")

    async def save_media(self, media_file, media_type):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ–¥–∏–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S_%f")
            ext = "jpg" if media_type == "photo" else "mp4"
            filename = f"media_{timestamp}.{ext}"
            filepath = os.path.join(self.MEDIA_DIR, filename)
            
            await media_file.download_to_drive(filepath)
            logger.info(f"–ú–µ–¥–∏–∞—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            return filepath
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞: {e}")
            return None

    async def safe_edit_message(self, query, text, reply_markup=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–æ–≤"""
        try:
            await asyncio.wait_for(
                query.edit_message_text(
                    text=text,
                    reply_markup=reply_markup
                ),
                timeout=self.TIMEOUT
            )
        except asyncio.TimeoutError:
            logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise

    async def safe_send_message(self, context, chat_id, text, reply_markup=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–æ–≤"""
        try:
            await asyncio.wait_for(
                context.bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    reply_markup=reply_markup
                ),
                timeout=self.TIMEOUT
            )
        except asyncio.TimeoutError:
            logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise

    async def safe_answer_callback(self, query):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–æ–≤"""
        try:
            await asyncio.wait_for(
                query.answer(),
                timeout=self.TIMEOUT
            )
        except asyncio.TimeoutError:
            logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback")
            raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: {e}")
            raise

    async def start(self, update: Update, context: CallbackContext) -> int:
        """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
        try:
            user = update.message.from_user if update.message else update.callback_query.from_user
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if 'session' not in context.user_data:
                context.user_data['session'] = {
                    'user_id': user.id,
                    'user_name': user.full_name or f"User_{user.id}",
                    'start_time': datetime.now().isoformat()
                }
            
            # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç–∞
            context.user_data['session'].update({
                'answers': {},
                'current_index': 0,
                'checklist_type': None,
                'checklist': None,
                'comments': None
            })
            
            keyboard = [
                [InlineKeyboardButton("üìñ –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data='open_shift')],
                [InlineKeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data='close_shift')]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await self.safe_edit_message(
                    update.callback_query,
                    "‚òï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CafeChecklistBot!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup
                )
            else:
                await self.safe_send_message(
                    context,
                    update.effective_chat.id,
                    "‚òï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CafeChecklistBot!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup
                )
                
            return MAIN_MENU
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}", exc_info=True)
            await self.handle_error(update, context)
            return ConversationHandler.END

    async def start_checklist(self, update: Update, context: CallbackContext, checklist_type: str) -> int:
        """–ù–∞—á–∏–Ω–∞–µ—Ç —á–µ–∫-–ª–∏—Å—Ç"""
        try:
            query = update.callback_query
            await self.safe_answer_callback(query)
            
            session = context.user_data.setdefault('session', {})
            session.update({
                'checklist_type': checklist_type,
                'current_index': 0,
                'answers': {},
                'comments': None
            })
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
            checklist_file = os.path.join(
                self.CONFIG_DIR,
                f"{checklist_type}_checklist.json"
            )
            
            checklist = self.load_json(checklist_file)
            if not checklist:
                await self.safe_edit_message(query, "‚ö†Ô∏è –ß–µ–∫-–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
                
            session['checklist'] = checklist
            return await self.show_question(update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_checklist: {e}", exc_info=True)
            await self.handle_error(update, context)
            return ConversationHandler.END

    async def show_question(self, update: Update, context: CallbackContext) -> int:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å"""
        try:
            session = context.user_data.get('session', {})
            checklist = session.get('checklist', [])
            current_idx = session.get('current_index', 0)
            
            if current_idx >= len(checklist):
                await self.safe_send_message(
                    context,
                    update.effective_chat.id,
                    "üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –æ—Ç—á–µ—Ç—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
                )
                return GET_COMMENTS
            
            question = checklist[current_idx]
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data='done'),
                    InlineKeyboardButton("‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data='not_done'),
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back') if current_idx > 0 else None
                ]
            ]
            # –£–¥–∞–ª—è–µ–º None –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            keyboard = [[btn for btn in row if btn is not None] for row in keyboard]
            
            text = f"üìã –í–æ–ø—Ä–æ—Å {current_idx+1}/{len(checklist)}:\n\n{question['question']}"
            if question.get('requires_media'):
                text += "\n\nüì∑ –¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –æ—Ç—á–µ—Ç!"
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await self.safe_edit_message(
                    update.callback_query,
                    text,
                    reply_markup
                )
            else:
                await self.safe_send_message(
                    context,
                    update.effective_chat.id,
                    text,
                    reply_markup
                )
                    
            return PROCESS_CHECKLIST
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_question: {e}", exc_info=True)
            await self.handle_error(update, context)
            return ConversationHandler.END

    async def handle_answer(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        try:
            query = update.callback_query
            await self.safe_answer_callback(query)
            
            session = context.user_data.get('session', {})
            current_idx = session.get('current_index', 0)
            checklist = session.get('checklist', [])
            
            if query.data == 'back':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                session['current_index'] = max(0, current_idx - 1)
                return await self.show_question(update, context)
            
            if current_idx >= len(checklist):
                return await self.finish_checklist(update, context)
                
            answer = query.data == 'done'
            question = checklist[current_idx]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
            session['answers'][str(current_idx)] = {
                'question': question['question'],
                'answer': answer,
                'reason': None,
                'media': None
            }
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            session['current_index'] += 1
            
            if not answer:
                text = f"üìã –í–æ–ø—Ä–æ—Å {current_idx+1}/{len(checklist)}:\n\n{question['question']}\n\nüìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É:"
                await self.safe_edit_message(query, text)
                return GET_REASON
                
            if question.get('requires_media'):
                text = f"üìã –í–æ–ø—Ä–æ—Å {current_idx+1}/{len(checklist)}:\n\n{question['question']}\n\nüì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –æ—Ç—á–µ—Ç:"
                await self.safe_edit_message(query, text)
                return GET_MEDIA
                
            return await self.show_question(update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_answer: {e}", exc_info=True)
            await self.handle_error(update, context)
            return ConversationHandler.END

    async def handle_reason(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É"""
        try:
            reason = update.message.text.strip()
            if not reason:
                await self.safe_send_message(
                    context,
                    update.effective_chat.id,
                    "‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É."
                )
                return GET_REASON
                
            session = context.user_data.get('session', {})
            current_idx = session.get('current_index', 1) - 1
            
            if str(current_idx) in session.get('answers', {}):
                session['answers'][str(current_idx)]['reason'] = reason
                
            checklist = session.get('checklist', [])
            if current_idx < len(checklist) and checklist[current_idx].get('requires_media'):
                text = f"üìã –í–æ–ø—Ä–æ—Å {current_idx+1}/{len(checklist)}:\n\n{checklist[current_idx]['question']}\n\nüì∑ –¢–µ–ø–µ—Ä—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –æ—Ç—á–µ—Ç:"
                await self.safe_send_message(
                    context,
                    update.effective_chat.id,
                    text
                )
                return GET_MEDIA
                
            return await self.show_question(update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_reason: {e}", exc_info=True)
            await self.handle_error(update, context)
            return ConversationHandler.END

    async def handle_media(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞"""
        try:
            session = context.user_data.get('session', {})
            current_idx = session.get('current_index', 1) - 1
            
            if update.message.photo:
                media_file = await update.message.photo[-1].get_file()
                media_type = "photo"
            elif update.message.video:
                media_file = await update.message.video.get_file()
                media_type = "video"
            else:
                text = f"üìã –í–æ–ø—Ä–æ—Å {current_idx+1}/{len(session.get('checklist', []))}:\n\n{session['checklist'][current_idx]['question']}\n\n‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ."
                await self.safe_send_message(
                    context,
                    update.effective_chat.id,
                    text
                )
                return GET_MEDIA
                
            media_path = await self.save_media(media_file, media_type)
            if media_path and str(current_idx) in session.get('answers', {}):
                session['answers'][str(current_idx)]['media'] = media_path
                
            return await self.show_question(update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_media: {e}", exc_info=True)
            await self.handle_error(update, context)
            return ConversationHandler.END

    async def handle_comments(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –æ—Ç—á–µ—Ç—É"""
        try:
            if update.message.text.strip().lower() == '/skip':
                comments = "–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
            else:
                comments = update.message.text.strip()
                
            context.user_data['session']['comments'] = comments
            return await self.finish_checklist(update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_comments: {e}", exc_info=True)
            await self.handle_error(update, context)
            return ConversationHandler.END

    async def send_report_to_admin(self, context: CallbackContext, admin_id, user_data):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
            report_text = self.format_report(user_data)
            await self.safe_send_message(
                context,
                admin_id,
                report_text
            )
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
            media_files = []
            for idx, answer in sorted(user_data.get('answers', {}).items(), key=lambda x: int(x[0])):
                if answer.get('media'):
                    media_path = answer['media']
                    try:
                        if os.path.exists(media_path):
                            if media_path.endswith(".jpg"):
                                media_files.append(InputMediaPhoto(media=open(media_path, 'rb')))
                            elif media_path.endswith(".mp4"):
                                media_files.append(InputMediaVideo(media=open(media_path, 'rb')))
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ {media_path}: {e}")
                        continue
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 10
            if media_files:
                for i in range(0, len(media_files), 10):
                    try:
                        await asyncio.wait_for(
                            context.bot.send_media_group(
                                chat_id=admin_id,
                                media=media_files[i:i+10]
                            ),
                            timeout=self.TIMEOUT
                        )
                    except asyncio.TimeoutError:
                        logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã")
                        continue
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
                        continue
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            raise

    async def finish_checklist(self, update: Update, context: CallbackContext) -> int:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —á–µ–∫-–ª–∏—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç"""
        try:
            session = context.user_data.get('session', {})
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if not session or not session.get('answers'):
                await self.safe_send_message(
                    context,
                    update.effective_chat.id,
                    "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start"
                )
                return ConversationHandler.END
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏—á–∏–Ω
            for idx, answer in session['answers'].items():
                if not answer['answer'] and not answer.get('reason'):
                    await self.safe_send_message(
                        context,
                        update.effective_chat.id,
                        f"‚ö†Ô∏è –î–ª—è –≤–æ–ø—Ä–æ—Å–∞ {int(idx)+1} —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É"
                    )
                    return MAIN_MENU
                    
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report = {
                'user_id': session.get('user_id'),
                'user_name': session.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
                'checklist_type': session.get('checklist_type'),
                'date': datetime.now().isoformat(),
                'answers': session['answers'],
                'comments': session.get('comments', '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤')
            }
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            report_file = os.path.join(
                self.REPORTS_DIR,
                f"{report['user_name']}_{report['checklist_type']}_{timestamp}.json"
            )
            
            if self.save_json(report, report_file):
                logger.info(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
                
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            admin_ids = self.load_json(os.path.join(self.CONFIG_DIR, "admin_ids.json"), [])
            if admin_ids:
                for admin_id in admin_ids:
                    try:
                        await self.send_report_to_admin(context, admin_id, session)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            keyboard = [
                [InlineKeyboardButton("üìñ –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data='open_shift')],
                [InlineKeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data='close_shift')],
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='start')]
            ]
            
            await self.safe_send_message(
                context,
                update.effective_chat.id,
                "‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é!",
                InlineKeyboardMarkup(keyboard)
            )
                
            # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            context.user_data['session'] = {
                'user_id': session.get('user_id'),
                'user_name': session.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
                'start_time': datetime.now().isoformat()
            }
            
            return MAIN_MENU
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ finish_checklist: {e}", exc_info=True)
            await self.handle_error(update, context)
            return ConversationHandler.END

    def format_report(self, session):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç"""
        checklist_type = "–æ—Ç–∫—Ä—ã—Ç–∏—è" if session.get('checklist_type') == "open" else "–∑–∞–∫—Ä—ã—Ç–∏—è"
        report_text = f"üìù –û—Ç—á–µ—Ç –ø–æ —á–µ–∫-–ª–∏—Å—Ç—É {checklist_type} —Å–º–µ–Ω—ã\n"
        report_text += f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {session.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}\n"
        report_text += f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        
        answers = session.get('answers', {})
        for idx, answer_data in sorted(answers.items(), key=lambda x: int(x[0])):
            status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if answer_data.get("answer", False) else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
            report_text += f"{int(idx)+1}. {answer_data.get('question', '–ë–µ–∑ –≤–æ–ø—Ä–æ—Å–∞')}\n"
            report_text += f"   {status}\n"
            if not answer_data.get("answer", True) and answer_data.get("reason"):
                report_text += f"   –ü—Ä–∏—á–∏–Ω–∞: {answer_data['reason']}\n"
            report_text += "\n"
        
        report_text += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {session.get('comments', '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤')}"
        
        return report_text

    async def handle_error(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        try:
            if update.callback_query:
                try:
                    await self.safe_edit_message(
                        update.callback_query,
                        "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start"
                    )
                except:
                    await self.safe_send_message(
                        context,
                        update.effective_chat.id,
                        "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start"
                    )
            elif update.message:
                await self.safe_send_message(
                    context,
                    update.effective_chat.id,
                    "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start"
                )
            if 'session' in context.user_data:
                context.user_data['session'] = {
                    'user_id': context.user_data['session'].get('user_id'),
                    'user_name': context.user_data['session'].get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
                    'start_time': datetime.now().isoformat()
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_error: {e}", exc_info=True)

    def setup_handlers(self, application):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler('start', self.start),
                MessageHandler(filters.TEXT & ~filters.COMMAND, self.start)
            ],
            states={
                MAIN_MENU: [
                    CallbackQueryHandler(
                        lambda u,c: self.start_checklist(u,c,'open'), 
                        pattern='^open_shift$'),
                    CallbackQueryHandler(
                        lambda u,c: self.start_checklist(u,c,'close'), 
                        pattern='^close_shift$'),
                    CallbackQueryHandler(self.start, pattern='^start$')
                ],
                PROCESS_CHECKLIST: [
                    CallbackQueryHandler(self.handle_answer, pattern='^(done|not_done|back)$')
                ],
                GET_REASON: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_reason)
                ],
                GET_MEDIA: [
                    MessageHandler(filters.PHOTO | filters.VIDEO, self.handle_media)
                ],
                GET_COMMENTS: [
                    MessageHandler(filters.TEXT | filters.COMMAND, self.handle_comments)
                ]
            },
            fallbacks=[CommandHandler('cancel', self.handle_error)],
            per_message=False
        )
        
        application.add_handler(conv_handler)
        application.add_error_handler(self.error_handler)

    async def error_handler(self, update: Update, context: CallbackContext):
        """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=True)
        await self.handle_error(update, context)

def main():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot = ChecklistBot()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = bot.load_json(os.path.join(bot.CONFIG_DIR, "config.json"))
        if not config.get("bot_token"):
            raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        bot.clean_old_media(force=True)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è Application
        application = Application.builder().token(config["bot_token"]).read_timeout(30).write_timeout(30).connect_timeout(30).build()
        bot.setup_handlers(application)
        
        logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        application.run_polling()
        
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", exc_info=True)

if __name__ == '__main__':
    main()
